#랜덤한 숫자를 8 ~ 15가지의 개수를 리스트에 저장하는 함수이다.
def makeRandList():
    import random
    rl, sz, mx = [], random.randint(8, 15), 5**5
    for i in range(sz):
        rl.append(random.randint(-mx, mx))
        rl[random.randint(0, i)] = random.choice(rl)
    return rl

#원소 리스트의 개수가 하나일 때,두 개일 때, 세개 이상일 때에 따라
#개수를 카운트 하는 변수이다.
num1, num2, num_over3 = 0, 0, 0

#반목문을 실행하여 중복 원소의 개수와 그 리스트를 출력
while True:
    print('*** 중복 원소 찾기 ***')

    #count[]는 만들어진 랜덤리스트의 각 요소들이 리스트 안에서의
    #개수를 카운트하고 저장해주는 리스트이고 cnt변수는 그 개수를
    #직접 카운팅해주는 변수이다.
    count= []
    cnt = 0

    #랜덤 리스트를 생성해 mylist에 복사한다.
    mylist = makeRandList()

    #중첩 반복문을 통해 i를 mylist의 요소들로 지정하고
    #j를 mylist의 원소 개수로 설정하여 i가 mylist를
    #0부터 len(mylist) -1 만큼 도는 동안 같은 원소의 개수를
    #카운팅하여 cnt를 증가시키고 내부 중첩문이 끝날 때마다
    #count리스트에 mylist 해당 요소 인덱스와
    #같은 위치에 저장해준다.
    for i in mylist:
        for j in range(0,len(mylist)-1):
            if i == mylist[j]:
                cnt += 1
    
        count.append(cnt)
        cnt = 0

    #저장된 count리스트에서 가장 많이 중복된 수를
    #max로 지정한다.
    max = count[0]
    for i in range(1, len(mylist)-1):
            if max <= count[i]:
                max = count[i]

    #최대 중복 개수인 answer_cnt를 max로 지정해주고
    #최대 중복 요소들이 answer_num에 없을 때 저장해준다.
    answer_cnt = max
    answer_num = []
    for i in range(0, len(mylist)-1):
            if count[i] == max and mylist[i] not in answer_num:
                answer_num.append(mylist[i])

    print('리스트 = ',mylist)
    print('최대 중복 개수 = %d, 중복 원소 리스트 = %s'%(answer_cnt, answer_num))
    print()

    #중복 원소 리스트안에 요소 개수들을 카운팅해서
    #1개 일때는 num1을 증가시켜주고
    #2개 일때는 num2를 증가시켜주고
    #3개 이상일 때는 num3을 증가시켜서
    #num1, num2, num3이 1개 이상일 때 반복문을 종료시킨다.
    cnt = 0
    for i in answer_num:
        cnt+=1

    if cnt == 1:
        num1 += 1
    elif cnt == 2:
        num2 += 1
    else:
        num_over3 += 1
        
    if (num1 > 0 and num2 > 0 and num_over3 > 0):
        break
